import sys
from fpdf import FPDF
import matplotlib.pyplot as plt
from datetime import datetime

# Input values from arguments
latency = float(sys.argv[1]) if sys.argv[1] != "N/A" else None
download_speed = float(sys.argv[2]) if sys.argv[2] != "N/A" else None
uptime = float(sys.argv[3]) / 3600 if sys.argv[3] != "N/A" else "N/A"

# Home averages for comparison
home_latency_avg = 25  # in ms
home_download_avg = 50  # in Mbps

# Create PDF Report
pdf = FPDF()
pdf.set_auto_page_break(auto=False)  # Disable auto page break for manual control
pdf.add_page()

# Define constants for spacing
PAGE_HEIGHT = 297  # A4 page height in mm
BOTTOM_MARGIN = 20  # Space reserved for footer (mm)
FOOTER_HEIGHT = 10  # Height of the footer

# Register and set a Unicode-compatible font
pdf.add_font("DejaVu", "", "/usr/share/fonts/dejavu-sans-fonts/DejaVuSans.ttf")
pdf.add_font("DejaVu", "B", "/usr/share/fonts/dejavu-sans-fonts/DejaVuSans-Bold.ttf")
pdf.add_font("DejaVu", "I", "/usr/share/fonts/dejavu-sans-fonts/DejaVuSans-Oblique.ttf")

# ------------------------------------------------------------
# Add Content (Track Y Position for Footer Placement)
# ------------------------------------------------------------
def add_content():
    # Title
    pdf.set_font("DejaVu", size=12, style="B")
    pdf.cell(0, 6, "âœ¨ Daily Network Performance Analytics", align="C", ln=True)
    pdf.set_font("DejaVu", size=8)
    pdf.cell(0, 4, f"Generated on: {datetime.now().strftime('%Y-%m-%d')}", align="C", ln=True)
    pdf.ln(4)

    # Summary Section with Images
    pdf.set_font("DejaVu", size=10, style="B")
    pdf.cell(0, 5, "Summary", ln=True, align="L")
    pdf.set_font("DejaVu", size=8)

    # Latency
    image_height = 4  # Height of the icon in mm
    text_height = 5   # Height of the text in mm
    y_offset = (text_height - image_height) / 2  # Center the image vertically

    pdf.image("/usr/local/bin/latency_icon.png", x=10, y=pdf.get_y() + y_offset, w=4)
    pdf.set_xy(18, pdf.get_y())
    pdf.cell(0, 5, f"Latency: {latency:.2f} ms" if latency else "Latency: N/A", ln=True)

    # Download Speed
    pdf.image("/usr/local/bin/speed_icon.png", x=10, y=pdf.get_y() + y_offset, w=4)
    pdf.set_xy(18, pdf.get_y())
    pdf.cell(0, 5, f"Download Speed: {download_speed:.2f} Mbps" if download_speed else "Download Speed: N/A", ln=True)

    # Uptime
    pdf.image("/usr/local/bin/uptime_icon.png", x=10, y=pdf.get_y() + y_offset, w=4)
    pdf.set_xy(18, pdf.get_y())
    pdf.cell(0, 5, f"Uptime: {uptime:.2f} hours" if uptime != "N/A" else "Uptime: N/A", ln=True)
    pdf.ln(2)

    # Graphs Section
    pdf.set_font("DejaVu", size=10, style="B")
    pdf.cell(0, 5, "Latency Performance (Comparison)", ln=True)
    pdf.image("/tmp/latency_line_graph.png", x=20, w=90)
    pdf.ln(4)

    pdf.cell(0, 5, "Download Speed Performance (Comparison)", ln=True)
    pdf.image("/tmp/download_speed_line_graph.png", x=20, w=90)
    pdf.ln(4)

    # Next Steps and Recommendations
    pdf.set_font("DejaVu", size=10, style="B")
    pdf.cell(0, 5, "Next Steps and Recommendations", ln=True, align="L")
    pdf.set_font("DejaVu", size=8)
    if latency and latency > home_latency_avg:
        pdf.cell(0, 4, "- High latency detected. Consider upgrading your internet connection.", ln=True)
    if download_speed and download_speed < home_download_avg:
        pdf.cell(0, 4, "- Low download speed. Check for network congestion or ISP issues.", ln=True)
    if uptime != "N/A" and uptime < 24:
        pdf.cell(0, 4, "- Uptime below 24 hours. Review system maintenance logs.", ln=True)
    pdf.ln(4)

# Generate content
add_content()

# ------------------------------------------------------------
# Add Footer to First Page Only
# ------------------------------------------------------------
def add_footer():
    # Switch to first page if content spans multiple pages
    current_page = pdf.page_no()
    if current_page > 1:
        pdf.set_page(1)  # Force footer to first page

    # Calculate Y position to avoid overlapping content
    max_y = PAGE_HEIGHT - BOTTOM_MARGIN - FOOTER_HEIGHT
    if pdf.get_y() > max_y:
        pdf.set_y(max_y)  # Move up if content is too long

    # Add footer
    pdf.set_font("DejaVu", style="I", size=6)
    pdf.cell(0, 10, f"Generated by AWX - Network Analytics on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", align="C")

add_footer()

# Save PDF
pdf.output("/tmp/network_report.pdf")
